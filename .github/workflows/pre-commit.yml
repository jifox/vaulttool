name: pre-commit

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    env:
      PIP_DISABLE_PIP_VERSION_CHECK: "1"
      PYTHONUNBUFFERED: "1"
      VAULTTOOL_PRECOMMIT: "1"
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          cache: pip

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install -e .
          python -m pip install pre-commit pytest

      - name: Run pre-commit
        uses: pre-commit/action@v3.0.1
        with:
          extra_args: --all-files

import os
from pathlib import Path
import subprocess
from .crypto import encrypt_file
from .utils import compute_checksum, encode_base64

# Read once from environment; used to avoid modifying .gitignore in pre-commit/CI contexts
VAULTTOOL_PRECOMMIT = bool(os.environ.get("VAULTTOOL_PRECOMMIT"))

def encrypt_files(config, force: bool = False):
    """
    Encrypts files matching patterns in the specified directories according to the configuration.

    - Encrypts files using OpenSSL and writes a .vault file containing the checksum and base64-encoded data.
    - Only re-encrypts if the source file's checksum changes.
    - Automatically adds the source files to the project's .gitignore to prevent accidental commits.
    - Uses include/exclude directories and patterns from the config.
    """
    include_dirs = config.get("include_directories", ["."])
    exclude_dirs = set(config.get("exclude_directories", []))
    include_patterns = config.get("include_patterns", [])
    exclude_patterns = set(config.get("exclude_patterns", []))
    suffix = config["options"].get("suffix", ".vault")
    key_file = config["options"].get("key_file")
    algorithm = config["options"].get("algorithm", "aes-256-cbc")
    openssl_path = config["options"].get("openssl_path", "openssl")

    # In pre-commit pytest runs, avoid touching repo .gitignore to prevent hook failures
    disable_gitignore = VAULTTOOL_PRECOMMIT and (Path(".git").exists())
    gitignore_lines = set()
    if not disable_gitignore:
        gitignore_path = Path(".gitignore")
        # Ensure .gitignore exists
        if not gitignore_path.exists():
            gitignore_path.touch()
        # Read existing .gitignore entries
        with open(gitignore_path, "r") as gi:
            gitignore_lines = set(line.strip() for line in gi if line.strip())
